#! /bin/bash

README_CONTENTS=$(
  cat <<EOF
# Architecture Decision Records
    
This directory captures architecture decision records for this project.
An architecture decision record is a justified software design choice 
that addresses a functional or non-functional requirement of architectural significance.

This directory and README is managed by [adl](https://github.com/bradcypert/adl). Please use \\\`adl create\\\` to create a new ADR.
If you need to regenerate this readme without creating a new ADR, please use \\\`adl regen\\\`.

## Contents 

{{contents}}

Last generated {{timestamp}}
EOF
)

ADR_CONTENTS=$(
  cat <<EOF
# {{name}}

## Abstract

## Context and Problem Statement

## Considered Options

## Decision Outcome

<!-- Add additional information here, comparison of options, research, etc -->
EOF
)

HELP_CONTENTS=$(
  cat <<EOF
adl
Manage your Architecture Reference Diagrams with ease.

help menu

supported arguments

create - adl create my-new-adr-name
  create a new ADR

regen - adl regen
  regenerate the ADR README
EOF
)

get_files_in_adr_dir() {
  files_in_adr_dir=()
  for file in ./adr/**; do
    file_name=$(basename "${file}")
    if [ "$file_name" != "README.md" ] && [ "$file_name" != "assets" ] && [ "$file_name" != "templates" ]; then
      files_in_adr_dir+=("$file_name")
    fi
  done
}

rebuild_readme() {
  if [ -e "./adr/templates/template_readme.md" ]; then
    TEMPLATE_CONTENT=$(cat "./adr/templates/template_readme.md")
  else
    TEMPLATE_CONTENT="$README_CONTENTS"
  fi
  date=$(LC_TIME=C TZ=UTC date "+%a, %d %b %Y %H:%M:%S UTC")
  output=$(sed "s|{{timestamp}}|${date}|g" <<<"$TEMPLATE_CONTENT")

  get_files_in_adr_dir
  for adr_file in "${files_in_adr_dir[@]}"; do
    contents+=" - [${adr_file}](./${adr_file})"
    contents+='\n'
  done

  contents=${contents: : -2}

  output=$(sed "s|{{contents}}|${contents}|g" <<<$output)
  echo "$output" >"./adr/README.md"
}

generate_adr() {
  n="$1"
  name="$2"
  padded_nums=$(printf "%05g\n" "$n")
  heading="${padded_nums} - ${name}"

  if [ -e "./adr/templates/template_adr.md" ]; then
    TEMPLATE_CONTENT=$(cat "./adr/templates/template_adr.md")
  else
    TEMPLATE_CONTENT="$ADR_CONTENTS"
  fi

  content=$(sed "s|{{name}}|${heading}|g" <<<$TEMPLATE_CONTENT)
  safe_name=$(sed "s|[/,\\,:,*,?,\",<,>,\, |]|-|g" <<<"$name")
  file_name="./adr/${padded_nums}-${safe_name}.md"
  echo "$content" >"$file_name"
}

establish_core_files() {
  mkdir -p "./adr/assets"
  mkdir -p "./adr/templates"
  echo "$README_CONTENTS" >"./adr/README.md"
}

if [ $# -eq 0 ]; then
  echo "$HELP_CONTENTS"
  exit 1
fi

while [[ $# -gt 0 ]]; do
  case $1 in
  create)
    shift
    NAME="$@"
    shift
    if [ ! "$NAME" ]; then
      echo 'No name supplied for the ADR.'
      echo 'Command should be: `adl create <Name of ADR here>`'
      exit 1
    fi
    establish_core_files
    get_files_in_adr_dir
    generate_adr ${#files_in_adr_dir[@]} "$NAME"
    rebuild_readme
    exit 0
    ;;
  regen)
    shift
    establish_core_files
    rebuild_readme
    exit 0
    ;;
  *)
    echo "Unknown command $1"
    echo "$HELP_CONTENTS"
    exit 1
    ;;
  esac
done
